<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Supplier Tools</title>
  <link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
  <style>
    body { font-family: Arial, sans-serif; margin: 2rem; }
    h1 { margin-bottom: 1rem; }
    .options a { display: block; margin: 0.5rem 0; cursor: pointer; text-decoration: none; color: black; }
    .options a:hover { text-decoration: underline; }
    .options a.active { color: blue; }
    .section { display: none; margin-top: 1rem; }
    table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
    th, td { border: 1px solid #ddd; padding: 0.75rem; text-align: left; }
    th { background-color: #f4f4f4; }
    td.supplier-cell { display: flex; align-items: center; }
    td.supplier-cell input[type="checkbox"] { margin-right: 0.5rem; }
    input.date-input { width: 120px; }
  </style>
</head>
<body>
  <h1>Supplier Tools</h1>
  <div class="options">
    <a onclick="toggleSection('supplier', this)">Supplier Price List Update</a>
    <a onclick="toggleSection('calculator', this)">Price Difference Calculator</a>
  </div>

  <div id="supplier" class="section">
    <h2>Supplier Price List Update</h2>
    <form>
      <table>
        <thead>
          <tr>
            <th>Supplier</th>
            <th>Last Update</th>
            <th>Recent Update</th>
          </tr>
        </thead>
        <tbody>
          <tr><td class="supplier-cell"><input type="checkbox"> Meyer</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
          <tr><td class="supplier-cell"><input type="checkbox"> Turn14</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
          <tr><td class="supplier-cell"><input type="checkbox"> Tonsa</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
          <tr><td class="supplier-cell"><input type="checkbox"> USAUTO KVDS 12</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
          <tr><td class="supplier-cell"><input type="checkbox"> USAUTO KV 11</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
          <tr><td class="supplier-cell"><input type="checkbox"> Depo</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
          <tr><td class="supplier-cell"><input type="checkbox"> Eagle</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
          <tr><td class="supplier-cell"><input type="checkbox"> TYC</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
          <tr><td class="supplier-cell"><input type="checkbox"> K-Source</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
          <tr><td class="supplier-cell"><input type="checkbox"> LKQ</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
          <tr><td class="supplier-cell"><input type="checkbox"> KSI</td><td><input type="text" class="date-input"></td><td><input type="text" class="date-input"></td></tr>
        </tbody>
      </table>
    </form>
  </div>

  <div id="calculator" class="section">
    <h2>Price Difference Calculator</h2>
    <div>
      <input type="file" id="file1" class="file-input" accept=".csv, .xlsx">
      <input type="file" id="file2" class="file-input" accept=".csv, .xlsx">
    </div>
    <div id="header-selects" style="display:none; margin-top:1rem;">
      <label>Key Column 1: <select id="key1"></select></label>
      <label>Key Column 2: <select id="key2"></select></label><br>
      <label>Price 1 Column: <select id="header1"></select></label>
      <label>Price 2 Column: <select id="header2"></select></label>
      <button type="button" onclick="computeDifference()">Compute Difference</button>
    </div>
    <div id="download-controls" style="display:none;">
      <button id="btn-csv">Download CSV</button>
      <button id="btn-xlsx">Download XLSX</button>
    </div>
    <div id="result-table"></div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <script>
    let data1 = [], data2 = [], resultData = [];

    function toggleSection(id, link) {
      const section = document.getElementById(id);
      const isActive = link.classList.contains('active');
      document.querySelectorAll('.options a').forEach(a => a.classList.remove('active'));
      document.querySelectorAll('.section').forEach(s => s.style.display = 'none');
      if (!isActive) {
        section.style.display = 'block';
        link.classList.add('active');
        if (id === 'supplier') flatpickr('.date-input', { dateFormat: 'm/d/Y', allowInput: true });
      }
    }

    function handleFile(file, idx) {
      const ext = file.name.split('.').pop().toLowerCase();
      const reader = new FileReader();
      reader.onload = e => {
        let rows;
        if (ext === 'csv') rows = Papa.parse(e.target.result, { header: true }).data;
        else {
          const wb = XLSX.read(e.target.result, { type: 'binary' });
          rows = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]], { defval: '' });
        }
        if (idx === 1) data1 = rows;
        else data2 = rows;
        if (data1.length && data2.length) populateHeaders();
      };
      if (ext === 'csv') reader.readAsText(file);
      else reader.readAsBinaryString(file);
    }

    document.getElementById('file1').addEventListener('change', e => handleFile(e.target.files[0], 1));
    document.getElementById('file2').addEventListener('change', e => handleFile(e.target.files[0], 2));

    function populateHeaders() {
      const h1 = Object.keys(data1[0]), h2 = Object.keys(data2[0]);
      document.getElementById('key1').innerHTML = h1.map(h => `<option value="${h}">${h}</option>`).join('');
      document.getElementById('key2').innerHTML = h2.map(h => `<option value="${h}">${h}</option>`).join('');
      document.getElementById('header1').innerHTML = h1.map(h => `<option value="${h}">${h}</option>`).join('');
      document.getElementById('header2').innerHTML = h2.map(h => `<option value="${h}">${h}</option>`).join('');
      document.getElementById('header-selects').style.display = 'block';
    }

    function computeDifference() {
      const k1 = document.getElementById('key1').value;
      const k2 = document.getElementById('key2').value;
      const c1 = document.getElementById('header1').value;
      const c2 = document.getElementById('header2').value;
      const map2 = new Map(data2.map(r => [r[k2], r]));
      resultData = data1.map(r => {
        const match = map2.get(r[k1]) || {};
        const v1 = parseFloat(r[c1]) || 0;
        const v2 = parseFloat(match[c2]) || 0;
        const diff = v2 - v1;
        const pct = v1 !== 0 ? (diff / v1 * 100).toFixed(2) + '%' : 'N/A';
        return { ...r, [`${c2}_difference`]: diff.toFixed(2), [`${c2}_pct_diff`]: pct };
      });
      displayResult(resultData);
      document.getElementById('download-controls').style.display = 'block';
    }

    function displayResult(rows) {
      if (!rows.length) return;
      const cols = Object.keys(rows[0]);
      let html = '<table><thead><tr>' + cols.map(c => `<th>${c}</th>`).join('') + '</tr></thead><tbody>';
      rows.forEach(r => {
        html += '<tr>' + cols.map(c => `<td>${r[c] || ''}</td>`).join('') + '</tr>';
      });
      html += '</tbody></table>';
      document.getElementById('result-table').innerHTML = html;
    }

    document.getElementById('btn-csv').addEventListener('click', () => {
      const csv = Papa.unparse(resultData);
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href = url; a.download = 'result.csv'; a.click(); URL.revokeObjectURL(url);
    });

    document.getElementById('btn-xlsx').addEventListener('click', () => {
      const ws = XLSX.utils.json_to_sheet(resultData);
      const wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, ws, 'Result');
      const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
      function s2ab(s) { const buf = new ArrayBuffer(s.length); const view = new Uint8Array(buf); for (let i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF; return buf; }
      const blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href = url; a.download = 'result.xlsx'; a.click(); URL.revokeObjectURL(url);
    });
  </script>
</body>
</html>
